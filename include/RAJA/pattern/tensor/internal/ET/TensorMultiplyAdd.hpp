/*!
 ******************************************************************************
 *
 * \file
 *
 * \brief   RAJA header file defining SIMD/SIMT register operations.
 *
 ******************************************************************************
 */

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-19, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#ifndef RAJA_pattern_tensor_ET_TensorMultiplyAddAdd_HPP
#define RAJA_pattern_tensor_ET_TensorMultiplyAddAdd_HPP

#include "RAJA/config.hpp"

#include "RAJA/util/macros.hpp"

#include "RAJA/pattern/tensor/internal/ET/ExpressionTemplateBase.hpp"
#include "RAJA/pattern/tensor/internal/ET/MultiplyOperator.hpp"

namespace RAJA
{

  namespace internal
  {

  namespace ET
  {


    /*!
     * Expression for LHS*RHS+ADD, which allows for accessing FMA style
     * operations.
     *
     * This ET can only be generated by contracting an Add and Multiple ET.
     *
     */
    template<typename LHS_TYPE, typename RHS_TYPE, typename ADD_TYPE>
    class TensorMultiplyAdd : public TensorExpressionBase<TensorMultiplyAdd<LHS_TYPE, RHS_TYPE, ADD_TYPE>> {
      public:
        using self_type = TensorMultiplyAdd<LHS_TYPE, RHS_TYPE, ADD_TYPE>;
        using lhs_type = LHS_TYPE;
        using rhs_type = RHS_TYPE;
        using add_type = ADD_TYPE;
        using element_type = typename LHS_TYPE::element_type;
        using index_type = typename LHS_TYPE::index_type;
        using multiply_op = MultiplyOperator<LHS_TYPE, RHS_TYPE>;
        using result_type = typename multiply_op::result_type;
        using tile_type = typename multiply_op::tile_type;
        static constexpr camp::idx_t s_num_dims = multiply_op::s_num_dims;

        RAJA_INLINE
        RAJA_HOST_DEVICE
        TensorMultiplyAdd(lhs_type const &lhs, rhs_type const &rhs,
                          add_type const &add) :
        m_lhs{lhs}, m_rhs{rhs}, m_add{add}
        {}


        template<typename STORAGE, typename TILE_TYPE>
        RAJA_INLINE
        RAJA_HOST_DEVICE
        void eval(STORAGE &result, TILE_TYPE const &tile) const {
          multiply_op::multiply_add(result, tile, m_lhs, m_rhs, m_add);
        }


        RAJA_INLINE
        RAJA_HOST_DEVICE
        void print_ast() const {
          printf("MultiplyAdd[");
          multiply_op::print_ast();
          printf("](");
          m_lhs.print_ast();
          printf(", ");
          m_rhs.print_ast();
          printf(", ");
          m_add.print_ast();
          printf(")");
        }


      private:
        lhs_type m_lhs;
        rhs_type m_rhs;
        add_type m_add;
    };




  } // namespace ET

  } // namespace internal

}  // namespace RAJA


#endif
