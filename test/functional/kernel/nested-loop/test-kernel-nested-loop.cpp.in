//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-21, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"
#include "RAJA_test-kernel-nested-loop-types.hpp"

#include "test-kernel-nested-loop-@NESTED_LOOP_TYPE@.hpp"

// ----------------------------------------------------------------------------
// Sequential
// ----------------------------------------------------------------------------
using DEPTH_2_SequentialKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::seq_exec  >,
    NestedLoopData< RAJA::seq_exec,  RAJA::loop_exec >,
    NestedLoopData< RAJA::loop_exec, RAJA::seq_exec  >,
    NestedLoopData< RAJA::loop_exec, RAJA::loop_exec >
  >;

using DEPTH_2_COLLAPSE_SequentialKernelNestedLoopExecPols = camp::list<>;

using DEPTH_3_SequentialKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::seq_exec, RAJA::seq_exec >
  >;

using OFFLOAD_DEPTH_2_SequentialKernelNestedLoopExecPols = camp::list<>;
using OFFLOAD_DEPTH_3_SequentialKernelNestedLoopExecPols = camp::list<>;

// ----------------------------------------------------------------------------
// OpenMP
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_OPENMP)

using DEPTH_2_OpenMPKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_for_exec>,
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::seq_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_for_static<8>, RAJA::seq_exec >,
    NestedLoopData< RAJA::omp_parallel_for_static<8>, RAJA::omp_parallel_for_exec >
  >;

    // Collapse Exec Pols
using DEPTH_2_COLLAPSE_OpenMPKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::omp_parallel_collapse_exec >
  >;
  
using DEPTH_3_OpenMPKernelNestedLoopExecPols = camp::list<
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::loop_exec, RAJA::loop_exec >
  >;

using OFFLOAD_DEPTH_2_OpenMPKernelNestedLoopExecPols = camp::list<>;
using OFFLOAD_DEPTH_3_OpenMPKernelNestedLoopExecPols = camp::list<>;
#endif  // RAJA_ENABLE_OPENMP


// ----------------------------------------------------------------------------
// OpenMP Target
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_TARGET_OPENMP)

using DEPTH_2_OpenMPTargetKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_target_parallel_for_exec<16> >,
    NestedLoopData< RAJA::loop_exec, RAJA::omp_target_parallel_for_exec<16> >
  >;

    // Collapse Exec Pols
using DEPTH_2_COLLAPSE_OpenMPTargetKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::omp_target_parallel_collapse_exec >
  >;

using DEPTH_3_OpenMPTargetKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_target_parallel_for_exec<16>, RAJA::seq_exec >
  >;

using OFFLOAD_DEPTH_2_OpenMPTargetKernelNestedLoopExecPols = camp::list<>;
using OFFLOAD_DEPTH_3_OpenMPTargetKernelNestedLoopExecPols = camp::list<>;
#endif  // RAJA_ENABLE_TARGET_OPENMP


//TBBKernelExecPol
//
//tbb_for_exec
//  tbb_for_exec
//
//seq
//  tbb_for_exec
//
//tbb_for_exec
//  seq


// ----------------------------------------------------------------------------
// CUDA
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_CUDA)
using DEPTH_2_CudaKernelNestedLoopExecPols = camp::list<>;
using DEPTH_3_CudaKernelNestedLoopExecPols = camp::list<>;
using DEPTH_2_COLLAPSE_CudaKernelNestedLoopExecPols = camp::list<>;

using OFFLOAD_DEPTH_2_CudaKernelNestedLoopExecPols =
  camp::list<
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::cuda_thread_y_loop >,
    OffloadNestedLoopData< RAJA::seq_exec, RAJA::cuda_thread_x_loop >,
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::seq_exec >
  >;

using OFFLOAD_DEPTH_3_CudaKernelNestedLoopExecPols =
  camp::list<
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::cuda_thread_y_loop, RAJA::seq_exec >,
    OffloadNestedLoopData< RAJA::cuda_block_x_loop, RAJA::cuda_thread_x_loop, RAJA::seq_exec >
  >;

#endif  // RAJA_ENABLE_CUDA

// ----------------------------------------------------------------------------
// HIP
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_HIP)
  
using DEPTH_2_HipKernelNestedLoopExecPols = camp::list<>;
using DEPTH_3_HipKernelNestedLoopExecPols = camp::list<>;
using DEPTH_2_COLLAPSE_HipKernelNestedLoopExecPols = camp::list<>;

using OFFLOAD_DEPTH_2_HipKernelNestedLoopExecPols =
  camp::list<
    OffloadNestedLoopData< RAJA::hip_thread_x_loop, RAJA::hip_thread_y_loop >,
    OffloadNestedLoopData< RAJA::seq_exec, RAJA::hip_thread_x_loop >,
    OffloadNestedLoopData< RAJA::hip_thread_x_loop, RAJA::seq_exec >
  >;

using OFFLOAD_DEPTH_3_HipKernelNestedLoopExecPols =
  camp::list<
    OffloadNestedLoopData< RAJA::hip_thread_x_loop, RAJA::hip_thread_y_loop, RAJA::seq_exec >,
    OffloadNestedLoopData< RAJA::hip_block_x_loop, RAJA::hip_thread_x_loop, RAJA::seq_exec >
  >;

#endif  // RAJA_ENABLE_HIP

using BasicKernelNestedLoopExecPols = 
  camp::join<
    DEPTH_2_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols,
    DEPTH_2_COLLAPSE_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols,
    DEPTH_3_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols,
    OFFLOAD_DEPTH_2_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols
  >::type;

using MultiLambdaKernelNestedLoopExecPols = 
  camp::join<
    DEPTH_2_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols,
    DEPTH_2_COLLAPSE_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols,
    OFFLOAD_DEPTH_2_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols
  >::type;

using MultiLambdaParamKernelNestedLoopExecPols = 
  camp::join<
    DEPTH_3_@NESTED_LOOP_BACKEND@KernelNestedLoopExecPols
  >::type;

//
// Cartesian product of types used in parameterized tests
//
using @NESTED_LOOP_BACKEND@KernelNestedLoopTypes =
  Test< camp::cartesian_product<@NESTED_LOOP_BACKEND@ResourceList,
                                @NESTED_LOOP_TYPE@KernelNestedLoopExecPols>>::Types;

//
// Instantiate parameterized test
//
INSTANTIATE_TYPED_TEST_SUITE_P(@NESTED_LOOP_BACKEND@,
                               KernelNestedLoop@NESTED_LOOP_TYPE@Test,
                               @NESTED_LOOP_BACKEND@KernelNestedLoopTypes);
