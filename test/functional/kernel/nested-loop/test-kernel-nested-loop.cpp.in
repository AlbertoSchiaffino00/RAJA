//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-21, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"
#include "RAJA_test-kernel-nested-loop-types.hpp"

#include "test-kernel-nested-loop-@NESTED_LOOP_TYPE@.hpp"

// ----------------------------------------------------------------------------
// Sequential
// ----------------------------------------------------------------------------
using SequentialKernelNestedLoopExecPols = camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::seq_exec  >,
    NestedLoopData< RAJA::seq_exec,  RAJA::loop_exec >,
    NestedLoopData< RAJA::loop_exec, RAJA::seq_exec  >,
    NestedLoopData< RAJA::loop_exec, RAJA::loop_exec >,
    NestedLoopData< RAJA::seq_exec,  RAJA::seq_exec, RAJA::seq_exec >
  >;

// ----------------------------------------------------------------------------
// OpenMP
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_OPENMP)

using OpenMPKernelNestedLoopExecPols = camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_for_exec>,
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::seq_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_for_static<8>, RAJA::seq_exec >,
    NestedLoopData< RAJA::omp_parallel_for_static<8>, RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_collapse_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::loop_exec, RAJA::loop_exec >
  >;

#endif  // RAJA_ENABLE_OPENMP


// ----------------------------------------------------------------------------
// OpenMP Target
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_TARGET_OPENMP)

using OpenMPTargetKernelNestedLoopExecPols = camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_target_parallel_for_exec<16> >,
    NestedLoopData< RAJA::loop_exec, RAJA::omp_target_parallel_for_exec<16> >,

    // Collapse Exec Pols
    NestedLoopData< RAJA::omp_target_parallel_collapse_exec >,

    // Depth 3 Exec Pols
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_target_parallel_for_exec<16>, RAJA::seq_exec >
  >;

#endif  // RAJA_ENABLE_TARGET_OPENMP


//TBBKernelExecPol
//
//tbb_for_exec
//  tbb_for_exec
//
//seq
//  tbb_for_exec
//
//tbb_for_exec
//  seq


// ----------------------------------------------------------------------------
// CUDA
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_CUDA)
using CudaKernelNestedLoopExecPols = camp::list<
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::cuda_thread_y_loop >,
    OffloadNestedLoopData< RAJA::seq_exec, RAJA::cuda_thread_x_loop >,
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::seq_exec >,

    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::cuda_thread_y_loop, RAJA::seq_exec >,
    OffloadNestedLoopData< RAJA::cuda_block_x_loop, RAJA::cuda_thread_x_loop, RAJA::seq_exec >
  >;

#endif  // RAJA_ENABLE_CUDA

// ----------------------------------------------------------------------------
// HIP
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_HIP)
  
using HipKernelNestedLoopExecPols = camp::list<
    OffloadNestedLoopData< RAJA::hip_thread_x_loop, RAJA::hip_thread_y_loop >,
    OffloadNestedLoopData< RAJA::seq_exec, RAJA::hip_thread_x_loop >,
    OffloadNestedLoopData< RAJA::hip_thread_x_loop, RAJA::seq_exec >,

    OffloadNestedLoopData< RAJA::hip_thread_x_loop, RAJA::hip_thread_y_loop, RAJA::seq_exec >,
    OffloadNestedLoopData< RAJA::hip_block_x_loop, RAJA::hip_thread_x_loop, RAJA::seq_exec >
  >;

#endif  // RAJA_ENABLE_HIP

namespace detail{

  template<typename T, typename Elements>
  struct _is_in_type_list ;

  template<typename T, typename First, typename... Rest>
  struct _is_in_type_list<T, camp::list<First, Rest...>> {
    using type = typename std::conditional< std::is_same< typename camp::at<T, camp::num<0>>::type , First >::value,
                                         camp::list<T>,
                                         typename _is_in_type_list<T, camp::list<Rest...>>::type >::type;
  };

  template<typename T, typename Last>
  struct _is_in_type_list<T, camp::list<Last>> {
    using type = typename std::conditional< std::is_same< typename camp::at<T, camp::num<0>>::type , Last>::value,
                                         camp::list<T>,
                                         camp::list<> >::type;
  };


  template<typename T, typename Elements>
  struct implLEB ;
 
  template<typename POL_TYPE_LIST, typename First, typename... Rest>
  struct implLEB<POL_TYPE_LIST, camp::list<First, Rest...>> {
    using type = typename camp::join<typename implLEB<POL_TYPE_LIST, camp::list<First>  >::type, 
                                     typename implLEB<POL_TYPE_LIST, camp::list<Rest...>>::type  >::type;
  };

  template<typename POL_TYPE_LIST, typename Last>
  struct implLEB<POL_TYPE_LIST, camp::list<Last>> {
    using type = typename _is_in_type_list<Last, POL_TYPE_LIST >::type;
  };

  template<typename POL_TYPE_LIST>
  struct implLEB<POL_TYPE_LIST, camp::list<>> {
    using type = camp::list<>;
  };
}

template<typename POL_TYPE_LIST, typename EXEC_POL_LIST>
struct NestedLoopExecBuilder {
  using type = typename detail::implLEB<POL_TYPE_LIST, EXEC_POL_LIST>::type;
};

using @NESTED_LOOP_TYPE@KernelNestedLoopExecPols = 
  NestedLoopExecBuilder<
    @NESTED_LOOP_TYPE@PolicyTypeList,
    @NESTED_LOOP_BACKEND@KernelNestedLoopExecPols
  >::type;

//
// Cartesian product of types used in parameterized tests
//
using @NESTED_LOOP_BACKEND@KernelNestedLoopTypes =
  Test< camp::cartesian_product<@NESTED_LOOP_BACKEND@ResourceList,
                                @NESTED_LOOP_TYPE@KernelNestedLoopExecPols>>::Types;

//
// Instantiate parameterized test
//
INSTANTIATE_TYPED_TEST_SUITE_P(@NESTED_LOOP_BACKEND@,
                               KernelNestedLoop@NESTED_LOOP_TYPE@Test,
                               @NESTED_LOOP_BACKEND@KernelNestedLoopTypes);
