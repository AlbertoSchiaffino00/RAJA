//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-21, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"

#include "test-kernel-nested-loop-@NESTED_LOOP_TYPE@.hpp"

//
//
// Nested Loop Data Type information
// Might want this in a header somewhere
//
//
template<typename EXEC_POL1, typename EXEC_POL2=void, typename EXEC_POL3=void>
struct s_NestedLoopData { 
  using type = camp::list<DEPTH_3,
                          EXEC_POL1,
                          EXEC_POL2,
                          EXEC_POL3>;
};

template<typename EXEC_POL1, typename EXEC_POL2>
struct s_NestedLoopData<EXEC_POL1, EXEC_POL2, void> { 
  using type = camp::list<DEPTH_2,
                          EXEC_POL1,
                          EXEC_POL2>;
};

template<typename EXEC_POL1>
struct s_NestedLoopData<EXEC_POL1, void, void> { 
  using type = camp::list<DEPTH_2_COLLAPSE,
                          EXEC_POL1>;
};

// Alias to clean up loop type information
template<typename... T >
using NestedLoopData = typename s_NestedLoopData<T...>::type;

template<typename EXEC_POL1, typename EXEC_POL2>
struct s_OffloadNestedLoopData { 
  using type = camp::list<OFFLOAD,
                          EXEC_POL1,
                          EXEC_POL2>;
};

// Alias to clean up loop type information
template<typename... T >
using OffloadNestedLoopData = typename s_OffloadNestedLoopData<T...>::type;

// ----------------------------------------------------------------------------
// Sequential
// ----------------------------------------------------------------------------
using SequentialKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::seq_exec  >,
    NestedLoopData< RAJA::seq_exec,  RAJA::loop_exec >,
    NestedLoopData< RAJA::loop_exec, RAJA::seq_exec  >,
    NestedLoopData< RAJA::loop_exec, RAJA::loop_exec >,
    NestedLoopData< RAJA::seq_exec,  RAJA::seq_exec, RAJA::seq_exec >
  >;


// ----------------------------------------------------------------------------
// OpenMP
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_OPENMP)

using OpenMPKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_for_exec>,
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::seq_exec >,
    NestedLoopData< RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec >,
    NestedLoopData< RAJA::omp_parallel_for_static<8>, RAJA::seq_exec >,
    NestedLoopData< RAJA::omp_parallel_for_static<8>, RAJA::omp_parallel_for_exec >,

    // Collapse Exec Pols
    NestedLoopData< RAJA::omp_parallel_collapse_exec >
  >;
#endif  // RAJA_ENABLE_OPENMP


// ----------------------------------------------------------------------------
// OpenMP Target
// ----------------------------------------------------------------------------
#if defined(RAJA_ENABLE_TARGET_OPENMP)
using OpenMPTargetKernelNestedLoopExecPols =
  camp::list<
    NestedLoopData< RAJA::seq_exec,  RAJA::omp_target_parallel_for_exec<16> >,
    NestedLoopData< RAJA::loop_exec,  RAJA::omp_target_parallel_for_exec<16> >,

    // Collapse Exec Pols
    NestedLoopData< RAJA::omp_target_parallel_collapse_exec >
  >;
#endif  // RAJA_ENABLE_TARGET_OPENMP


//TBBKernelExecPol
//
//tbb_for_exec
//  tbb_for_exec
//
//seq
//  tbb_for_exec
//
//tbb_for_exec
//  seq


#if defined(RAJA_ENABLE_CUDA)

// ----------------------------------------------------------------------------
// CUDA
// ----------------------------------------------------------------------------
using CudaKernelNestedLoopExecPols =
  camp::list<
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::cuda_thread_y_loop >,
    OffloadNestedLoopData< RAJA::seq_exec, RAJA::cuda_thread_x_loop >,
    OffloadNestedLoopData< RAJA::cuda_thread_x_loop, RAJA::seq_exec >
  >;

#endif  // RAJA_ENABLE_CUDA


//
// Cartesian product of types used in parameterized tests
//
using @NESTED_LOOP_BACKEND@KernelNestedLoopTypes =
  Test< camp::cartesian_product<@NESTED_LOOP_BACKEND@ResourceList,
                                @NESTED_LOOP_BACKEND@KernelNestedLoopExecPols>>::Types;

//
// Instantiate parameterized test
//
INSTANTIATE_TYPED_TEST_SUITE_P(@NESTED_LOOP_BACKEND@,
                               KernelNestedLoop@NESTED_LOOP_TYPE@Test,
                               @NESTED_LOOP_BACKEND@KernelNestedLoopTypes);
