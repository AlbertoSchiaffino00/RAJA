//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-21, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"

#include "test-kernel-nested-loop-@NESTED_LOOP_TYPE@.hpp"

template<typename EXEC_POL1, typename EXEC_POL2>
using DoubleNestedLoopExec = 
  camp::tuple<DEPTH_2,
    RAJA::KernelPolicy<
      RAJA::statement::For<1, EXEC_POL1,
        RAJA::statement::For<0, EXEC_POL2,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >;

template<typename EXEC_POL1, typename EXEC_POL2, typename EXEC_POL3>
using TripleNestedLoopExec = 
  camp::tuple<DEPTH_3,
    RAJA::KernelPolicy<
      RAJA::statement::For<2, EXEC_POL1,
        RAJA::statement::For<1, EXEC_POL2,
          RAJA::statement::For<0, EXEC_POL3,
            RAJA::statement::Lambda<0>
          >
        >
      >
    >
  >;

//SeqKernelExecPol
//
//Seq
//  Seq
//
//Seq
//  Loop
//
//Loop
//  Seq
//
//Loop
//  Loop
//
using SequentialKernelNestedLoopExecPols =
  camp::list<
    DoubleNestedLoopExec< RAJA::seq_exec,  RAJA::seq_exec  >,
    DoubleNestedLoopExec< RAJA::seq_exec,  RAJA::loop_exec >,
    DoubleNestedLoopExec< RAJA::loop_exec, RAJA::seq_exec  >,
    DoubleNestedLoopExec< RAJA::loop_exec, RAJA::loop_exec >,
    TripleNestedLoopExec< RAJA::seq_exec,  RAJA::seq_exec, RAJA::seq_exec >
  >;


//OMPKernelExexPol
//
//seq
//  omp_for
//
//seq
//  omp_parallel_for
//
//omp_parallel_for
//  seq
//
//omp_parallel_for
//  omp_parallel_for
//
//omp_parallel_for_static
//  omp_parallel_for
//
//Collapse < omp_parallel_collapse_exec >

#if defined(RAJA_ENABLE_OPENMP)

using OpenMPKernelNestedLoopExecPols =
  camp::list<

    DoubleNestedLoopExec< RAJA::seq_exec,  RAJA::omp_for_exec>,
    DoubleNestedLoopExec< RAJA::seq_exec,  RAJA::omp_parallel_for_exec >,
    DoubleNestedLoopExec< RAJA::omp_parallel_for_exec, RAJA::seq_exec >,
    DoubleNestedLoopExec< RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec >,
    DoubleNestedLoopExec< RAJA::omp_parallel_for_static<8>, RAJA::seq_exec >,
    DoubleNestedLoopExec< RAJA::omp_parallel_for_static<8>, RAJA::omp_parallel_for_exec >

    // Collapse Exec Pols
    //RAJA::KernelPolicy<
    //  RAJA::statement::Collapse<RAJA::omp_parallel_collapse_exec,
    //    RAJA::ArgList<1,0>,
    //    RAJA::statement::Lambda<0>
    //  >
    //>

  >;

#endif  // RAJA_ENABLE_OPENMP

//OMPKernelExexPol
//
//seq
//  omp_target_parallel_for
//
//loop
//  omp_target_parallel_for
//
//omp_parallel_for
//  omp_target_parallel_for ?
#if defined(RAJA_ENABLE_TARGET_OPENMP)

using OpenMPTargetKernelNestedLoopExecPols =
  camp::list<
    DoubleNestedLoopExec< RAJA::seq_exec,  RAJA::omp_target_parallel_for_exec<16> >

    //// TODO: Works for XLC and Clang10, but only up to input size of 362x362 matrix.
    //RAJA::KernelPolicy<
    //  RAJA::statement::Collapse<RAJA::omp_target_parallel_collapse_exec,
    //    RAJA::ArgList<1,0>,
    //    RAJA::statement::Lambda<0>
    //  >
    //>

  >;

#endif  // RAJA_ENABLE_TARGET_OPENMP

//TBBKernelExecPol
//
//tbb_for_exec
//  tbb_for_exec
//
//seq
//  tbb_for_exec
//
//tbb_for_exec
//  seq


//Cuda(Hip)KernelExecPols
//
//CudaKernel
//  thread_x_loop
//    thread_y_loop
//
//seq
//  CudaKernel
//    thread_x_loop
//      thread_y_loop
//
//CudaKernel
//  block_x_loop
//    thread_x_loop
//      thread_y_loop
//
//CudaKernel
//  Tile< tile_fixed, cuda_block_x_loop
//    thread_x_loop
//      thread_y_loop


//
// Cartesian product of types used in parameterized tests
//
using @NESTED_LOOP_BACKEND@KernelNestedLoopTypes =
  Test< camp::cartesian_product<@NESTED_LOOP_BACKEND@ResourceList,
                                @NESTED_LOOP_BACKEND@KernelNestedLoopExecPols>>::Types;

//
// Instantiate parameterized test
//
INSTANTIATE_TYPED_TEST_SUITE_P(@NESTED_LOOP_BACKEND@,
                               KernelNestedLoop@NESTED_LOOP_TYPE@Test,
                               @NESTED_LOOP_BACKEND@KernelNestedLoopTypes);
